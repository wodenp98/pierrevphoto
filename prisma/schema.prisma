generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  orders        Order[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Article {
  id          Int     @id @default(autoincrement())
  description String
  imageUrl    String
  imagePreview String @default("url")
  name        String
  price       Float
  aspectRatio String  @default("paysage")
  orders      Order[]
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  orderedAt   DateTime @default(now())
  totalPrice  Float
  status      String   @default("en attente")
  description String
  articleId   Int
  articles    Article  @relation(fields: [articleId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Carousel {
  id       Int    @id @default(autoincrement())
  imageUrl String
  name     String
}

model Portfolio {
  id       Int    @id @default(autoincrement())
  imageUrl String
  name     String
}
